// ---------------------------------------------------------------------------
// Global math variables
// this is the language that is passed into the math functions, not nessisarily user-facing.

$context: 960, 960px, 100%, 40em !default;
$columns: 12 !default;
$gutter: 0 !default;
$margin: 0 !default;

// ---------------------------------------------------------------------------
// Columns & Context

// Return the number of columns in a given grid.
//
// column-count($columns)
// - $columns   : <intiger> | <list>
//              - unitless integer represents symmetric column count.
//              - list represents set of asymmetric column ratios.
@function column-count($columns) {
  @if type-of($columns) == number {
    @return $columns;
  }
  @if type-of($columns) == list {
    @return length($columns);
  }
}

// Find context
@function find-context($columns, $gutter, $margin) {

  // If auto columns exist, context needs to be calculated.
  @if query-list($columns, auto) != false or length(columns) == 1 {
    @return nth($context, nth(query-list($context, unit($gutter), unit), 1));
  }
  @else {

    // Find sum of columns
    $column-sum: list-sum($columns);

    // Find sum of gutters
    $gutter-sum: $gutter * (column-count($columns) - 1);

    // Find sum of margin
    $margin-sum: list-sum($margin);
    @if type-of($margin) == number {
      $margin-sum: $margin * 2;
    }

    @return $column-sum + $gutter-sum + $margin-sum;
  }
}

// Find column widths
@function column-widths($columns, $gutter, $margin, $context: false) {

  // If 
  @if type-of($columns) == list and query-list($columns, auto) == false {
    @return $columns;
  }

  // Calculate column width if needed
  @else  {
    // Find the sum of all columns minus the margins and columns.
    $margin-sum: list-sum($margin);
    @if type-of($margin) == number {
      $margin-sum: $margin * 2;
    }
    $gutter-sum: $gutter * (column-count($columns) - 1);

    @if $context == false {
      $context: find-context($columns, $gutter, $margin);
    }
    
    $column-sum: $context - $margin-sum - $gutter-sum;

    // For uniform columns, write a single value.
    @if length($columns) == 1 {
      @return $column-sum / column-count($columns);
    }

    // If non-uniform columns
    @else {

      $sum: 0;
      $auto: query-list($columns, auto);

      // Find the sum of defined columns
      @for $i from 1 through column-count($columns) {
        @if query-list($auto, $i) == false {
          $sum: $sum + nth($columns, $i);
        }
      }
      
      // Auto clumn width:
      $auto-column: ($column-sum - $sum) / length(query-list($columns, auto));
      
      // Re-write list filling auto in based on context.
      $list: ();
      @each $column in $columns {
        @if $column == auto {
          $list: append($list, $auto-column);
        }
        @else {
          $list: append($list, $column);
        }
      }

      @return $list;

    }
  }
}

// ---------------------------------------------------------------------------
// Grid Span

// Just find the width of a portion of the grid.
//
// column-count($columns)
// - $span      : <intiger>
// - $location  : <intiger>
//              - location on the grid where a span begins. Only nessisary for non-uniform columns.
// - $columns   : <intiger> | <list>
//              - unitless integer represents symmetric column count.
//              - list represents set of asymmetric column ratios.
// - $gutter    : <value>
//              - A value comparable to the context or columns.
// - $margin    : <optional> | <value>
//              - A value comparable to the context or columns.
// - $context   : <optional> | <value>
//              - A value comparable to the context or columns.
@function grid-span-width($span, $location, $columns, $gutter, $margin: $margin, $context: false) {
  
  // If the context isnâ€™t explicitly defined, find it.
  @if $context == false {
    $context: find-context($columns, $gutter, $margin);
  }

  // Find column widths.
  $column-widths: column-widths($columns, $gutter, $margin, $context);

  // Define zero width to be overritten or added onto.
  $width: 0;

  // Write width simply if column width is uniform.
  @if length($column-widths) == 1 {
    $width: ($column-widths * $span) + ($gutter * ($span - 1));
  }

  // Loop through columns from location if not.
  @else {
    @for $i from $location to ($location + $span) {
      $width: $width + nth($column-widths, $i);
    }
    // Add on gutters
    $width: $width + ($gutter * ($span - 1));
  }

  // Return a percentage value of width/context
  @return percentage($width / $context);
}

// VARIABLES ARE PLACEHOLDERS UNTIL PROPER GIRD PARSING CAN BE DONE
// SYNTAX SUBJECT TO CHANGE
@function grid-span($string) {

  $string: parse-string($string);

  // Identify @media context.
  
  // Parse variables out of context and the mixin string.
  
  // Write name-spaced local variables from the context defined above.
  // $grid-span-span     : $span
  // $grid-span-location : $location
  // $grid-span-columns  : $columns
  // $grid-span-gutter   : $gutter
  // $grid-span-margin   : $margin
  // $grid-span-context  : $context

  // Return the width based on those parsed values.
  // @return grid-span-width($grid-span-span, $grid-span-location, $grid-span-columns, $grid-span-gutter, $grid-span-margin);
  @return $string;
}