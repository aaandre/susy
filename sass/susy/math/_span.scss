// Span math
// =========

@function fix-static-column-width(
  $columns          : $columns,
  $gutters          : $gutters,
  $column-width     : $column-width,
  $container-width  : $container-width
) {
  @if $container-width and unit($container-width) != '%' {
    $re-calculate: false;
    @if $column-width {
      @if $container-width != calculate-container-width($columns, $gutters, $column-width) {
        @warn "$container-width and $column-width don't match. Static grids require one or the other, or a matching pair.";
      }
    } @else {
      $re-calculate: true;
    }
    @if $re-calculate {
      $column-ratio: 1 / column-sum($columns, $gutters);
      $column-width: $container-width * $column-ratio;
    }
  }

  @if not $column-width {
    @warn "Static output requires either $column-width or $container-width in order to correctly calculate widths.";
  }

  @return $column-width;
}

// Find relative width of the column span
@function relative-column-span(
  $span,
  $location : false,
  $columns  : $columns,
  $gutters  : $gutters
) {
  $span-sum : get-column-span-sum($span, $location, $columns, $gutters);
  $context  : column-sum($columns, $gutters);

  @return percentage($span-sum / $context);
}

// Find static width of the column span
@function static-column-span(
  $span,
  $location         : false,
  $columns          : $columns,
  $gutters          : $gutters,
  $column-width     : $column-width,
  $container-width  : $container-width
) {
  $width: null;
  $span-sum: get-column-span-sum($span, $location, $columns, $gutters);
  $column-width: fix-static-column-width($columns, $gutters, $column-width, $container-width);

  @if $column-width {
    $width: $span-sum * $column-width;
  }

  @return $width;
}

// Calculate the span width - relative, static, or arbitrary
@function get-span-width(
  $span,
  $location       : false,
  $columns        : $columns,
  $gutters        : $gutters,
  $column-width   : $column-width,
  $gutter-position: $gutter-position,
  $container-width: $container-width,
  $static         : $static-output
) {
  $width: false;

  @if unitless($span) {
    @if $static {
      $width: static-column-span($span, $location, $columns, $gutters, $column-width, $container-width);
      @if is-inside-gutter($gutter-position){
        $gutter: static-gutter-span($gutters, $column-width, $container-width);
        $width: $width + $gutter;
      }
    } @else {
      @if is-inside-gutter($gutter-position) {
        $gutters: 0;
      }
      $width: relative-column-span($span, $location, $columns, $gutters);
    }
  } @else {
    $width: $span;
  }

  @return $width;
}

// Calculate the outer span width, including outer gutter
@function get-span-outer-width(
  $span,
  $location       : false,
  $columns        : $columns,
  $gutters        : $gutters,
  $column-width   : $column-width,
  $gutter-position: $gutter-position,
  $container-width: $container-width,
  $static         : $static-output
) {
  $width  : get-span-width($span, $location, $columns, $gutters, $column-width, $gutter-position, $container-width,  $static);
  $gutter : 0;

  @if unitless($span) and not is-inside-gutter($gutter-position) {
    $gutter: get-gutter-width($columns, $gutters, $column-width, $container-width, $static);
  }

  @return $width + $gutter;
}
