// ---------------------------------------------------------------------------
// String parser

// Break a list into sub-lists.
//
// break-list($list)
// $list  : <list>
//        - May contain strings (keywords) and values.
@function break-list($list) {

  // blank list.
  $return: ();
  $sublist: ();

  // loop through list.
  @for $i from 1 through length($list) {
    $item: nth($list, $i);
    @if type-of($item) == string {
      // If it's a string start a new list.
      $return: append($return, $sublist, comma);
      $sublist: $item;
      @if $i == length($list) {
        // If it's the last item add it.
        $return: append($return, $item, comma);
      }
    }
    @else {
      // If not a string append to the current list.
      $sublist: join($sublist, $item, space);
      @if $i == length($list) {
        // If it's the last item add the sub-list.
        $return: append($return, $sublist, comma);
      }
    }
  }

  @return $return;
}


// ---------------------------------------------------------------------------
// Parse natural language string

// Retrieve values from the natural language string.
// parse-string($var, $list)
// - $var    : <string>
//           - at/span/of or any other keywords.
//           - 'span' queries the unprefixed span declaration.
//           - 'at' can also query first, last, alpha, and omega.
// - $list   : <list>
//           - A list like this: last 2 of (1 1 2) push 1
//
// Useage:
// parse-string(at, $list);    // Will return "last" from the above list.
// parse-string(of, $list);    // Will return "1 1 2".
// parse-string(span, $list);  // Will return "2".
@function parse-string($var, $list) {

  $found: false;

  // Loop through list.
  @each $item in $list {

    // if 'span' - return the first numeric.
    // if keyword was found - return the following item.
    @if (type-of($item) == number and $var == span) or $found == true {
      @return $item;
    }

    // 'at' - return 1/last/following value.
    @elseif $var == at {
      @if $item == first or $item == alpha {
        @return 1;
      }
      @elseif $item == last or $item == omega {
        @return last;
      }
    }

    // Any keyword - return the following value.
    @if $item == $var {
      $found: true;
    }

  }

  // Wasn't found.
  @return false;
}

