// ---------------------------------------------------------------------------
// Parse natural language strings


// Format string to consistent <name value name value> arrangement
@function format-string($string) {

  $i              : 1     ;
  $new-string     : ()    ;

  @while $i <= length($string) {

    // Custom commands to parse

    // Span
    @if type-of(nth($string, $i)) == number {
      $susy-span: nth($string, $i);
      $new-string: join($new-string, span nth($string, $i));
    }

    // Location keywords
    @elseif nth($string, $i) == first or nth($string, $i) == alpha {
      $new-string: join($new-string, at 1);
    }
    @elseif nth($string, $i) == last or nth($string, $i) == omega {
      $new-string: join($new-string, at last);
    }



    // Catch all for regular prefixes
    @elseif type-of(nth($string, $i)) == string {
      $susy-span: nth($string, $i);
      $new-string: join($new-string, nth($string, $i) nth($string, $i+1));
      $i: $i + 1;
    }

    // Bump up counter
    $i: $i + 1;
  }

  // Global variables re-written. Spit out the string without changes.
  @return $new-string;
}

// parse the formatted string
@function parse-string($var, $string) {

  // format the string so everything has a keyword.
  $string: format-string($string);

  // get the location of the variable.
  $location: nth(query-list($string, $var), 1);
  @if $location != false {
    // return the value associated with the variable.
    @return nth($string, $location + 1);
  }
  @else {
    @return false;
  }
}