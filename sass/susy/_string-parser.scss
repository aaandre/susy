// ---------------------------------------------------------------------------
// Parse natural language string


// Retrieve values from the natural language string.
// column-count($var, $string)
// - $var       : <name>
//              - at, span, of, and other keywords.
//              - span queries the unprefixed span declaration and at can query first, last, alpha, and omega.
// - $string    : <list>
//              - A list like this: last 5 of 12 push 3
//
// Useage:
// Query the prefix, not the meaning of the prefix. For example, query "at" instead of "location".
// parse-string(at, $string) will return "last" from the above string.
@function parse-string($var, $string) {

  // Counter starts at 1
  $i: 1;

  // Using while with a counter instead of a @for loop.
  // This is because the counter may increase by 1 or 2 depending on argument.
  @while $i <= length($string) {

    // Custom commands to parse
    // Short hand like first or last as well as the unprefixed span value.

    // Span
    @if type-of(nth($string, $i)) == number {
      @if $var == span {
        @return nth($string, $i);
      }
    }

    // Location keywords
    @elseif nth($string, $i) == first or nth($string, $i) == alpha {
      @if $var == at {
        @return 1;
      }
    }
    @elseif nth($string, $i) == last or nth($string, $i) == omega {
      @if $var == at {
        @return last;
      }
    }



    // Catch all for regular prefixes
    @elseif type-of(nth($string, $i)) == string {

      // Return the value if it matches the requested keyword.
      @if $var == nth($string, $i) {
        // the value is right after the keyword.
        @return nth($string, $i+1);
      }

      // Because this is two items in the list, bump counter up an extra 1.
      $i: $i + 1;
    }

    // Bump up counter.
    $i: $i + 1;
  }

  // Return the new sting with additional values.
  @return false;
}