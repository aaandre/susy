// ---------------------------------------------------------------------------
// Parse natural language strings


// Format string to consistent <name value name value> arrangement.
// This prefixes unprefixed items in the list and makes things easy to parse.
@function format-string($string) {

  // Counter starts at 1
  $i              : 1     ;
  // Empty string
  $new-string     : ()    ;

  // Using while with a counter instead of a normal @for loop.
  // This is because the counter may increase by 1 or 2 depending on argument.
  @while $i <= length($string) {

    // Custom commands to parse
    // Short hand like first or last as well as the unprefixed span value.

    // Span
    @if type-of(nth($string, $i)) == number {
      $new-string: join($new-string, span nth($string, $i));
    }

    // Location keywords
    @elseif nth($string, $i) == first or nth($string, $i) == alpha {
      $new-string: join($new-string, at 1);
    }
    @elseif nth($string, $i) == last or nth($string, $i) == omega {
      $new-string: join($new-string, at last);
    }



    // Catch all for regular prefixes
    // This string parser is intended to prefx and clean up natural language
    // so things that are already prefixed can just pass through.
    @elseif type-of(nth($string, $i)) == string {

      // Add the name and value to the new string.
      $new-string: join($new-string, nth($string, $i) nth($string, $i+1));

      // Because this is two items in the list, bump counter up an extra 1.
      $i: $i + 1;
    }

    // Bump up counter
    $i: $i + 1;
  }

  // Return the new sting with additional values.
  @return $new-string;
}


// ---------------------------------------------------------------------------
// parse the formatted string
// parse-string($var, $string)
// - $var       : <name>
//              - Your query like "span"
// - $string    : <string>
//              - The string for the span mixin like "first 2 of 12 push 3".
@function parse-string($var, $string) {

  // format the string so everything has a keyword.
  $string: format-string($string);

  // get the location of the variable.
  $location: nth(query-list($string, $var), 1);
  @if $location != false {
    // return the value associated with the variable.
    @return nth($string, $location + 1);
  }

  // If the value can not be found, return false.
  @else {
    @return false;
  }
}